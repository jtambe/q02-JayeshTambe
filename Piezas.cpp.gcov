        -:    0:Source:Piezas.cpp
        -:    0:Graph:Piezas.gcno
        -:    0:Data:Piezas.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Piezas.h"
        -:    2:#include <vector>
        -:    3:#include <iostream>
        -:    4:using namespace std;
        -:    5:/** CLASS Piezas
        -:    6: * Class for representing a Piezas vertical board, which is roughly based
        -:    7: * on the game "Connect Four" where pieces are placed in a column and 
        -:    8: * fall to the bottom of the column, or on top of other pieces already in
        -:    9: * that column. For an illustration of the board, see:
        -:   10: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   11: *
        -:   12: * Board coordinates [row,col] should match with:
        -:   13: * [2,0][2,1][2,2][2,3]
        -:   14: * [1,0][1,1][1,2][1,3]
        -:   15: * [0,0][0,1][0,2][0,3]
        -:   16: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   17: * dropped in column 2 should take [1,2].
        -:   18:**/
        -:   19:
        -:   20:
        -:   21:/**
        -:   22: * Constructor sets an empty board (default 6 rows, 7 columns) and 
        -:   23: * specifies it is X's turn first
        -:   24:**/
function _ZN6PiezasC2Ev called 17 returned 100% blocks executed 57%
       17:   25:Piezas::Piezas()
call    0 returned 17
call    1 never executed
        -:   26:{		
        -:   27:
       17:   28:	board.resize( BOARD_ROWS, vector<Piece>( BOARD_COLS , Blank ) );	
call    0 returned 17
call    1 returned 17
branch  2 taken 17 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 17
branch  5 taken 17 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 17
branch  8 taken 17 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 17
call   11 never executed
call   12 never executed
       17:   29:	turn = X;
       17:   30:}
        -:   31:
        -:   32:
function _ZN6Piezas10toggleTurnEv called 24 returned 100% blocks executed 100%
       24:   33:Piece Piezas::toggleTurn()
        -:   34:{
       24:   35:	if (turn == X) {turn = O;}	
branch  0 taken 16 (fallthrough)
branch  1 taken 8
        8:   36:	else if (turn == O) {turn = X;}
branch  0 taken 8 (fallthrough)
branch  1 taken 0
       24:   37:	return turn;
        -:   38:}
        -:   39:
        -:   40:/**
        -:   41: * Resets each board location to the Blank Piece value, with a board of the
        -:   42: * same size as previously specified (or default if overloaded constructor
        -:   43: * is never called).
        -:   44:**/
function _ZN6Piezas5resetEv called 1 returned 100% blocks executed 100%
        1:   45:void Piezas::reset()
        -:   46:{
        4:   47:	for (int i=0; i<BOARD_ROWS ; i++)
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:   48:	{		
       15:   49:		for (int j=0; j<BOARD_COLS ; j++)
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:   50:			{
       12:   51:				board[i][j] = Blank;
call    0 returned 12
call    1 returned 12
        -:   52:			}
        -:   53:	}
        -:   54:
        1:   55:}
        -:   56:
        -:   57:/**
        -:   58: * Places a piece of the current turn on the board, returns what
        -:   59: * piece is placed, and toggles which Piece's turn it is. dropPiece does 
        -:   60: * NOT allow to place a piece in a location where a column is full.
        -:   61: * In that case, placePiece returns Piece Blank value 
        -:   62: * Out of bounds coordinates return the Piece Invalid value
        -:   63: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   64:**/ 
function _ZN6Piezas9dropPieceEi called 19 returned 100% blocks executed 100%
       19:   65:Piece Piezas::dropPiece(int column)
        -:   66:{
       19:   67:	Piece result = turn;
        -:   68:	// invalid column
       19:   69:	if(column > BOARD_COLS-1) //call this with invalid column
branch  0 taken 1 (fallthrough)
branch  1 taken 18
        -:   70:	{
        1:   71:		toggleTurn();
call    0 returned 1
        1:   72:		return Invalid;
        -:   73:	}
        -:   74:	
        -:   75:	// is column full case
       18:   76:	if(board[0][column] != Blank) // call dropPiece more than thrice
call    0 returned 18
call    1 returned 18
branch  2 taken 3 (fallthrough)
branch  3 taken 15
        -:   77:	{
        3:   78:		toggleTurn();
call    0 returned 3
        3:   79:		return Blank;
        -:   80:	}
        -:   81:
        -:   82:	//cout << "here in droppiece" << endl;
        -:   83:	// general case
       30:   84:	for(int i =BOARD_ROWS-1; i >=0 ;i--) 
branch  0 taken 30
branch  1 taken 0 (fallthrough)
        -:   85:	{
       30:   86:		if(board[i][column] ==  Blank)
call    0 returned 30
call    1 returned 30
branch  2 taken 15 (fallthrough)
branch  3 taken 15
        -:   87:		{
       15:   88:			board[i][column] = turn;			
call    0 returned 15
call    1 returned 15
       15:   89:			result = turn;
       15:   90:			toggleTurn();
call    0 returned 15
       15:   91:			break;
        -:   92:			//return result;
        -:   93:		}
        -:   94:	}
       15:   95:	return result;
        -:   96:}
        -:   97:
        -:   98:/**
        -:   99: * Returns what piece is at the provided coordinates, or Blank if there
        -:  100: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:  101:**/
function _ZN6Piezas7pieceAtEii called 27 returned 100% blocks executed 100%
       27:  102:Piece Piezas::pieceAt(int row, int column)
        -:  103:{	
       27:  104:	if(row < 0 || row > BOARD_ROWS-1 || column < 0 || column > BOARD_COLS-1) // call with invalid input
branch  0 taken 27 (fallthrough)
branch  1 taken 0
branch  2 taken 26 (fallthrough)
branch  3 taken 1
branch  4 taken 26 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 26
        -:  105:	{
        1:  106:		return Invalid;
        -:  107:	}
        -:  108:	else
        -:  109:	{
       26:  110:		return board[row][column];
call    0 returned 26
call    1 returned 26
        -:  111:	}
        -:  112:
        -:  113:}
        -:  114:
        -:  115:// myfunction for making testing easy
function _ZN6Piezas10placePieceEiic called 39 returned 100% blocks executed 100%
       39:  116:Piece Piezas::placePiece(int row, int column, char c)
        -:  117:{
       39:  118:	if(row < 0 || row > BOARD_ROWS-1 || column < 0 || column > BOARD_COLS-1) // call with invalid input
branch  0 taken 39 (fallthrough)
branch  1 taken 0
branch  2 taken 38 (fallthrough)
branch  3 taken 1
branch  4 taken 38 (fallthrough)
branch  5 taken 0
branch  6 taken 0 (fallthrough)
branch  7 taken 38
        -:  119:	{
        1:  120:		return Invalid;
        -:  121:	}
        -:  122:	else // call with fixed input
        -:  123:	{
       38:  124:		if(c == 'x') {board[row][column] = X;}
branch  0 taken 19 (fallthrough)
branch  1 taken 19
call    2 returned 19
call    3 returned 19
       38:  125:		if(c == 'o') {board[row][column] = O;}
branch  0 taken 19 (fallthrough)
branch  1 taken 19
call    2 returned 19
call    3 returned 19
       38:  126:		return board[row][column];
call    0 returned 38
call    1 returned 38
        -:  127:	}
        -:  128:
        -:  129:}
        -:  130:
        -:  131:
        -:  132:
        -:  133:
        -:  134:
        -:  135:/**
        -:  136: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  137: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  138: * For a game to be over, all locations on the board must be filled with X's 
        -:  139: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  140: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  141: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  142: * line, it is a tie.
        -:  143:**/
function _ZN6Piezas9gameStateEv called 4 returned 100% blocks executed 100%
        4:  144:Piece Piezas::gameState()
        -:  145:{
        4:  146:	bool isGameOver = true;
        -:  147:
       16:  148:	for (int i=0; i<BOARD_ROWS ; i++)
branch  0 taken 12
branch  1 taken 4 (fallthrough)
        -:  149:	{		
       60:  150:		for (int j=0; j<BOARD_COLS ; j++)
branch  0 taken 48
branch  1 taken 12 (fallthrough)
        -:  151:			{
       48:  152:				if(board[i][j] == Blank)
call    0 returned 48
call    1 returned 48
branch  2 taken 12 (fallthrough)
branch  3 taken 36
        -:  153:				{
       12:  154:					isGameOver = false;   // call it while board has some blank pieces
        -:  155:				}
        -:  156:			}
        -:  157:	}
        -:  158:
        4:  159:	if(isGameOver == false)
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  160:	{
        1:  161:		return Invalid;
        -:  162:	}
        -:  163:
        3:  164:	int maxXcount = 0;
        3:  165:	int maxOcount = 0;
        -:  166:
        3:  167:	int xcount =0; int ocount = 0;
        -:  168:
        -:  169:	// check max count within rows
       12:  170:	for (int i=0; i<BOARD_ROWS ; i++)
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        -:  171:	{		
       45:  172:		for (int j=0; j<BOARD_COLS ; j++)
branch  0 taken 36
branch  1 taken 9 (fallthrough)
        -:  173:		{
       36:  174:			if(board[i][j] == X)
call    0 returned 36
call    1 returned 36
branch  2 taken 18 (fallthrough)
branch  3 taken 18
        -:  175:			{
       18:  176:				ocount =0;
       18:  177:				xcount++;
       18:  178:				if(maxXcount < xcount)
branch  0 taken 7 (fallthrough)
branch  1 taken 11
        -:  179:				{
        7:  180:					maxXcount = xcount;
        -:  181:				}
        -:  182:			}
       18:  183:			else if(board[i][j] == O)
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0
        -:  184:			{
       18:  185:				xcount =0;
       18:  186:				ocount++;
       18:  187:				if(maxOcount < ocount)
branch  0 taken 6 (fallthrough)
branch  1 taken 12
        -:  188:				{
        6:  189:					maxOcount = ocount;
        -:  190:				}
        -:  191:			}
        -:  192:
        -:  193:		}
        9:  194:		xcount =0;  ocount = 0;
        -:  195:	}
        -:  196:
        -:  197:	//cout << "maxXcount: " << maxXcount << endl;
        -:  198:	//cout << "maxOcount: " << maxOcount << endl;
        -:  199:
        3:  200:	xcount =0;  ocount = 0;
        -:  201:	// check maxcount within columns
       15:  202:	for (int i=0; i<BOARD_COLS ; i++) // 0 - 3
branch  0 taken 12
branch  1 taken 3 (fallthrough)
        -:  203:	{
       48:  204:		for (int j=0; j<BOARD_ROWS ; j++) // 0 - 2
branch  0 taken 36
branch  1 taken 12 (fallthrough)
        -:  205:		{
       36:  206:			if(board[j][i] == X)
call    0 returned 36
call    1 returned 36
branch  2 taken 18 (fallthrough)
branch  3 taken 18
        -:  207:			{
       18:  208:				ocount =0;
       18:  209:				xcount++;
       18:  210:				if(maxXcount < xcount)
branch  0 taken 2 (fallthrough)
branch  1 taken 16
        -:  211:				{
        2:  212:					maxXcount = xcount;
        -:  213:				}
        -:  214:			}
       18:  215:			else if(board[j][i] == O)
call    0 returned 18
call    1 returned 18
branch  2 taken 18 (fallthrough)
branch  3 taken 0
        -:  216:			{
       18:  217:				xcount =0;
       18:  218:				ocount++;
       18:  219:				if(maxOcount < ocount)
branch  0 taken 3 (fallthrough)
branch  1 taken 15
        -:  220:				{
        3:  221:					maxOcount = ocount;
        -:  222:				}
        -:  223:			}
        -:  224:		}
       12:  225:		xcount =0;  ocount = 0;
        -:  226:	}
        -:  227:
        -:  228:	//cout << "maxXcount: " << maxXcount << endl;
        -:  229:	//cout << "maxOcount: " << maxOcount << endl;
        -:  230:	
        3:  231:	if(maxXcount > maxOcount){ return X;} // call it after placing x as winner
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        2:  232:	if(maxXcount < maxOcount){ return O;} // call it after placing o as winner 
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  233:	else {return Blank;} // manage equal entries
        -:  234:
function _GLOBAL__sub_I__ZN6PiezasC2Ev called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  235:}
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        -:  236:
        -:  237:
        -:  238:// int main()
        -:  239:// {
        -:  240:// 	// Piezas p;
        -:  241:// 	// //cout << p.pieceAt(0,5) << endl;;
        -:  242:
        -:  243:
        -:  244:// 	// //p.reset();
        -:  245:// 	// for (int i =0; i<BOARD_ROWS ;i++)
        -:  246:// 	// {		
        -:  247:// 	// 	for (int j=0; j<BOARD_COLS ;j++)
        -:  248:// 	// 		{
        -:  249:// 	// 			cout << p.pieceAt(i,j) << '\t';
        -:  250:// 	// 		}
        -:  251:// 	// 		cout << endl;
        -:  252:// 	// }
        -:  253:
        -:  254:// 	// cout << p.toggleTurn() << endl;
        -:  255:
        -:  256:
        -:  257:// 	Piezas p;
        -:  258:
        -:  259:
        -:  260:// 	p.placePiece(0,0, 'o');
        -:  261:// 	p.placePiece(1,0, 'o');
        -:  262:// 	p.placePiece(2,0, 'o');
        -:  263:
        -:  264:// 	p.placePiece(0,1, 'o');
        -:  265:// 	p.placePiece(1,1, 'o');
        -:  266:// 	p.placePiece(2,1, 'o');
        -:  267:	
        -:  268:
        -:  269:// 	p.placePiece(0,2, 'o');
        -:  270:// 	p.placePiece(1,2, 'o');
        -:  271:// 	p.placePiece(2,2, 'o');
        -:  272:
        -:  273:
        -:  274:// 	p.placePiece(0,3, 'o');
        -:  275:// 	p.placePiece(1,3, 'x');
        -:  276:// 	p.placePiece(2,3, 'x');
        -:  277:
        -:  278:
        -:  279:// 	for (int i =0; i<BOARD_ROWS ;i++)
        -:  280:// 	{		
        -:  281:// 		for (int j=0; j<BOARD_COLS ;j++)
        -:  282:// 			{
        -:  283:// 				cout << p.pieceAt(i,j) << '\t';
        -:  284:// 			}
        -:  285:// 			cout << endl;
        -:  286:// 	}
        -:  287:
        -:  288:// 	cout << p.gameState() << endl;
        -:  289:
        -:  290:
        -:  291:
        -:  292:// 	// cout << "new test" << endl;
        -:  293:// 	// p.dropPiece(2);
        -:  294:// 	// p.dropPiece(2);
        -:  295:// 	// p.dropPiece(2);
        -:  296:// 	// cout << p.pieceAt(2,2) << endl;
        -:  297:// 	// cout << p.pieceAt(1,2) << endl;
        -:  298:// 	// cout << p.pieceAt(0,2) << endl;
        -:  299:
        -:  300:// 	// p.placePiece(0,0, 'x');
        -:  301:// 	// p.placePiece(0,1, 'x');
        -:  302:// 	// p.placePiece(0,2, 'x');
        -:  303:// 	// p.placePiece(0,3, 'x');
        -:  304:	
        -:  305:// 	// p.placePiece(1,0, 'o');
        -:  306:// 	// p.placePiece(1,1, 'o');
        -:  307:// 	// p.placePiece(1,2, 'o');
        -:  308:// 	// p.placePiece(1,3, 'o');
        -:  309:
        -:  310:
        -:  311:// 	// p.placePiece(2,0, 'x');
        -:  312:// 	// p.placePiece(2,1, 'x');
        -:  313:// 	// p.placePiece(2,2, 'x');
        -:  314:// 	// p.placePiece(2,3, 'x');
        -:  315:	
        -:  316:// 	// cout << "winner: " << p.gameState() << endl;
        -:  317:
        -:  318:// 	//cout << "success" << endl;
        -:  319:
        -:  320:// }
